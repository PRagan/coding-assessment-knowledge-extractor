"""
LLM Knowledge Extractor: Prototype that takes in text and uses an LLM to produce both a summary and structured data
Author: Philip Ragan
Request and Response models for API endpoints
"""
from pydantic import BaseModel, Field
from typing import List, Optional
from datetime import datetime

class AnalysisRequest(BaseModel):
    """Request model for text analysis"""
    text: str = Field(..., description="Unstructured text to analyze", min_length=1)

class AnalysisResponse(BaseModel):
    """Response model for text analysis results"""
    id: int = Field(..., description="Unique analysis ID")
    text: str = Field(..., description="Original input text")
    summary: str = Field(..., description="1-2 sentence summary generated by LLM")
    title: Optional[str] = Field(None, description="Extracted title if available")
    topics: List[str] = Field(default=[], description="3 key topics extracted by LLM")
    sentiment: str = Field(..., description="Sentiment analysis: positive, neutral, or negative")
    keywords: List[str] = Field(default=[], description="3 most frequent nouns extracted manually")
    created_at: datetime = Field(..., description="Analysis timestamp")

    class Config:
        from_attributes = True

class SearchResponse(BaseModel):
    """Response model for search results"""
    id: int = Field(..., description="Unique analysis ID")
    summary: str = Field(..., description="Text summary")
    title: Optional[str] = Field(None, description="Extracted title if available")
    topics: List[str] = Field(default=[], description="Key topics")
    sentiment: str = Field(..., description="Sentiment classification")
    keywords: List[str] = Field(default=[], description="Extracted keywords")
    created_at: datetime = Field(..., description="Analysis timestamp")
    confidence_score: float = Field(..., description="Search relevance confidence score (0.0-1.0)")

    class Config:
        from_attributes = True

class BatchAnalysisRequest(BaseModel):
    """Request model for batch processing of texts"""
    texts: List[str] = Field(..., description="List of texts to analyze", min_items=1, max_items=10)

class BatchAnalysisResponse(BaseModel):
    """Response model for batch processing results"""
    results: List[AnalysisResponse] = Field(..., description="List of analysis results")
    total_processed: int = Field(..., description="Total number of texts processed")
    errors: List[str] = Field(default=[], description="Any errors encountered during processing")